"""
Test math.r2py's trigonometry functions.
"""
#pragma repy restrictions.default dylink.r2py

math = dy_import_module("math.r2py")

# This is how accurate the results must be for the tests to pass.
# NOTE: From 1e-16 on, tests start to fail!
epsilon = 1e-14

# Tables of expected results for sin and cos.
# Keep these synchronized, the tan test depends on both of them!
sin_results = [
    (0, 0),
    (math.pi/6, 0.5),
    (math.pi/4, 0.5**0.5),
    (math.pi/3, 0.75**0.5),
    (math.pi/2, 1),
    (math.pi, 0),
    (3*math.pi/2, -1),
    (2*math.pi, 0),
    #(1000*math.pi, 0), # 15 decimal digits of accuracy don't suffice here
]

cos_results = [
    (0, 1),
    (math.pi/6, 0.75**0.5),
    (math.pi/4, 0.5**0.5),
    (math.pi/3, 0.5),
    (math.pi/2, 0),
    (math.pi, -1),
    (3*math.pi/2, 0),
    (2*math.pi, 1),
    #(1000*math.pi, 1), # In contrast to sin, this *is* accurate!
]


# Construct the tan results list from sin's and cos's
tan_results = []
for sin_test, cos_test in zip(sin_results, cos_results):
  sin_arg, sin_result = sin_test
  cos_arg, cos_result = cos_test
  # Make sure the args match so that we can compute the tan
  if sin_arg != cos_arg:
    log("Conflicting args for sin and cos:", sin_arg, cos_arg, "\n")
    continue
  try:
    tan_results.append((sin_arg, sin_result/cos_result))
  except ZeroDivisionError:
    # tan(pi/2) approaches infinity. Skip!
    pass



def log_if_not_within_epsilon(test, arg, result1, result2, epsilon=epsilon):
  """Helper function to log details if the expected and actual results
  differ by more than epsilon for a test."""
  if abs(result1-result2) > epsilon:
    log("Wrong", test, "result for argument", arg, "-- is", result1,
        "should be", result2, "\n")


# Direct tests
for x, known_result in sin_results:
  log_if_not_within_epsilon("sin", x, math.sin(x), known_result)

for x, known_result in cos_results:
  log_if_not_within_epsilon("cos", x, math.cos(x), known_result)

for x, known_result in tan_results:
  log_if_not_within_epsilon("tan", x, math.tan(x), known_result)


# Symmetry tests
# sin(-x) = -sin(x)
for x, known_result in sin_results:
  log_if_not_within_epsilon("minus sin", -x, math.sin(-x), -known_result)

# cos(-x) = cos(x)
for x, known_result in cos_results:
  log_if_not_within_epsilon("minus cos", -x, math.cos(-x), known_result)

# tan(-x) = -tan(x)
for x, known_result in tan_results:
  log_if_not_within_epsilon("minus tan", -x, math.tan(-x), -known_result)


